.. _contributing:

############
Contributing
############


.. _api-docs:

API Documentation
*****************

Documentation for the Cyclops API is generated by following command::

    $ npm run docs

This will create HTML in a directory named `docs` that outlines all the individual components that make up the the express server and react application, and creates search functionality for all those components.

.. _code-style:

Code Style
**********

General
=======

The style uses `Typescript's coding guidelines <https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines>`_ and `TSLint rules <https://palantir.github.io/tslint/>`_ with a few exceptions. These exceptions are outlined in the ``tslint.json`` file at the root of the project directory.

Make sure to run TSLint before making a pull request.

.. _code-style-express-router:

Express Router
==============

::

    import { Router, RequestHandler } from 'express';

    export class NewRouter {
      /** Express router object. */
      public router: Router;

      constructor() {
        this.router = Router();
        this.middleware();
        this.routes();
      }

      /** Handles a routes request */
      public route: RequestHandler = (req, res) => {};

      /**
       * Configures middleware for this router.
       */
      private middleware(): void {
        this.router.use(URL, middleware);
      }

      /**
       * Configure routes for this router.
       */
      private routes(): void {
        this.router.get('*', this.route)
      }
    }

Whenever you need to use the router, just call ``new NewRouter().router``.

.. _code-style-typescript-redux:

Typescript Redux
================

There's a specific way to write redux actions and reducers that make it type safe. There are a few utilities and types to help with this process.

.. _code-style-typescript-redux-actions:

actions
-------

::
    
    // Helper function that creates a type safe action.
    import { createAction } from 'utils/createReduxAction';
    import {
      // Redux action type.
      ReduxAction,

      // Thunk action type that returns a promise.
      ThunkActionPromise,

      // Thunk action that doesn't return anything.
      ThunkActionVoid,
    } from 'types/redux';

    /**
     * Action type prefix to differentiate this set of actions from another
     * set of actions.
     * @type {string}
     */
    const ACTION_PREFIX = 'NAME';

    // --------------------------------------------------------------------------
    // CHANGE_NAME
    // --------------------------------------------------------------------------

    /**
     * Action Type: Action description goes here.
     * @type {string}
     */
    export const CHANGE_NAME = `${ACTION_PREFIX}/CHANGE_NAME`;

    /** CHANGE_NAME payload type. */
    export type ChangeNamePayload = string;

    /** CHANGE_NAME action type. */
    export type ChangeNameAction = ReduxAction<ChangeNamePayload>;

    /**
     * Creates a(n) CHANGE_NAME action.
     * @returns {ChangeNameAction}
     */
    export function changeName(payload: string): ChangeNameAction {
      return createAction(EXAMPLE, payload);
    }

    // --------------------------------------------------------------------------
    // Thunk Actions
    // --------------------------------------------------------------------------

    /**
     * Returns a redux thunk action that returns a promise.
     * @param arg Example argument
     * @returns {ThunkActionPromise}
     */
    export function thunkPromise(arg: string): ThunkActionPromise {
      return (dispatch, getState) => {
        return promise(arg).then((response) => {
          dispatch(changeName(response))
        });
      };
    }

    /**
     * Returns a redux thunk action that returns nothing.
     * @param arg Example argument
     * @returns {ThunkActionPromise}
     */
    export function thunkVoid(arg: string): ThunkActionVoid {
      return (dispatch, getState) => {
        dispatch(changeName(arg));
      };
    }

.. _code-style-typescript-redux-reducer:

reducer
-------

::
    
    // Third party library that helps create redux reducers and actions.
    import {
      // Creates the reducer for us from a reducer map.
      handleActions,
      // Object type that holds indexed reducer functions.
      ReducerMap,
    } from 'redux-actions';
    import * as _ from 'lodash';

    // Actions and actions types defined earlier.
    import * as actions from '../actions/actions';

    /** State shape of the reducer. */
    export interface State {
      name: string;
    }

    /**
     * Initial state of the reducer.
     * @type {State}
     */
    const INITIAL_STATE: State = {
      name: '',
    };

    /** Object that maps action types to their reducer functions. */
    const reducers: ReducerMap<State, any> = {};

    /**
     * Updates the reducer based on a(n) CHANGE_NAME action.
     * @param state Current reducer state.
     * @param action CHANGE_NAME action.
     * @returns {State} Updated reducer state.
     */
    reducers[actions.CHANGE_NAME] = (
      state: State,
      action: actions.ChangeNameAction,
    ): State => {
      // This checks if the update matches some of the state shape.
      const update: Partial<State> = {
        name: action.payload,
      };

      return _.assign({}, state, update);
    };

    /**
     * Combined reducer from reducer map.
     * @type {Reducer<State, any>}
     */
    export const reducer = handleActions<State, any>(reducers, INITIAL_STATE);

After creating a new reducer, link the State type to the main redux state shape in **store.ts** so that any references to the store state are type checked.

.. _directory-structure:

Directory Structure
*******************

When creating new files, ensure that they fit into the logic outlined by the current directory structure.

Root
====

::

    |── build/
    |── sphinx-docs/
    |── docs/
    |── src/
    |   |── express/
    |   |── react/
    |   └── scss/
    |── webpack/
    |   |── constants.js
    |   |── constants.d.ts
    |   |── webpack.dev.config.js
    |   └── webpack.prod.config.js
    |── constants.js
    |── constants.d.ts
    |── karma.conf.js
    |── mocha.opts
    |── tslint.json
    └── typedoc.json

- **build:** Generated code from the source files is output into this folder. This file is ignored by git to prevent any unnecessary conflicts. See :ref:`directory-structure-build` for more information.
- **sphinx-docs:** Source files for creating this read the docs folder.
- **docs:** Output folder for generated API documentation. This file is ignored by it to prevent any unnecessary conflicts.
- **src:** Source files for Cyclops that are compiled and output to the build folder. Currently contains 3 directories:

    - **express:** Typescript files for the express server that surfaces the application. See :ref:`directory-structure-express` for more information.
    - **react:** Typescript files for the single page application that displays Cyphon data. See :ref:`directory-structure-react` for more information.
    - **scss:** Sass files for the applications main css file. See :ref:`directory-structure-scss` for more information.

- **webpack:** Webpack configuration files.

    - **constants.js:** Base webpack configuration.
    - **constants.d.ts:** Typescript definitions for the base webpack configuration.
    - **webpack.dev.config.js:** Webpack configuration for a developer environment.
    - **webpack.prod.config.js:** Webpack configuration for a production environment.

- **constants.js:** Constants that are used by multiple configuration files that mainly pertain to directory paths and file names. Use the constants in this file whenever trying to create directory paths for configuration files.
- **constants.d.ts:** Typescript definition file for the constants so it can be used in any of the Typescript code bases.
- **cyclops.env:** Cyclops environment variables created whenever the express server is run. This is used for configuring the express server for runtime. Ignored by git due to the possibility of sensitive information.
- **cyclops.env.COPYME:** Outline of the possible environment variables that can be created for cyclops.env.
- **typedoc.json:** Typescript configuration file used for creating the API documentation.

.. _directory-structure-react:

React
=====

::

    |── api/
    |   └── endpoint/
    |       |── _tests_/
    |       |── api.ts
    |       |── constants.ts
    |       |── schema.ts
    |       |── types.ts
    |       └── utils.ts
    |── components/
    |   └── _tests_/
    |── services/
    |   └── service
    |       |── components/
    |       |   └── _tests_/
    |       |── utils/
    |       |   └── _tests_/
    |       |── types.ts
    |       └── constants.ts
    |── types/
    |   └── types.ts
    |── typings/
    |   └── typing.d.ts
    |── utils/
    |   |── _tests_/
    |   └── utility.ts
    |── views/
    |   └── view/
    |       |── actions/
    |       |   └── _tests_/
    |       |── components/
    |       |   └── _tests_/
    |       |── containers/
    |       |   └── _tests_/
    |       |── reducers/
    |       |   └── _tests_/
    |       |── utils/
    |       |   └── _tests_/
    |       |── constants.ts
    |       └── types.ts
    |── app.tsx
    |── config.ts
    |── store.ts
    └── tsconfig.json

- **_tests_:** See :ref:`directory-structure-tests`.
- **api:** Contains files that connect to the Cyphon API. It's subdirectory's are correlated to the root of the Cyphon API to easily locate where endpoint types and functions live. Each subdirectory is named after the API url and can contains these files:

    - **api.ts:** Functions that gets or sends information to the API endpoint.
    - **constants.ts:** Constants for this endpoint.
    - **schemas.ts:** Normalizr schema's used to created normalized data from the objects returned from this endpoint.
    - **types.ts:** Object types returned from this endpoint.
    - **utils.ts:** Helper functions for objects returned from this endpoint.

- **components:** Contains react components that are reused across the application.
- **services:** Related react components and utilities that are reused across the application. Each subdirectory can contain these directories and file names:

    - **components:** React components for this service.
    - **utils:** Helper functions for this service.
    - **constants.ts:** Constants used for this service.
    - **types.ts:** Interfaces/Types used for this service.

- **types:** Interfaces/Types used across the application.
- **typings:** Typescript definition files for 3rd party libraries that are not located in the DefinitelyTyped github repository.
- **utils:** Helper functions used across the entire application.
- **views:** Related react components and utilities that are specific to a particular route defined in react-router. Each subdirectory should be named for the route in the router definition and contain these directories and file names:

    - **actions:** Redux actions related to this view. Files in this directory should follow the style referenced here: :ref:`code-style-typescript-redux-actions`.
    - **components:** React components related to this view.
    - **containers:** Redux containers related to this view.
    - **reducers:** Redux reducers related to this view. Files in this directory should follow the style referenced here: :ref:`code-style-typescript-redux-reducer`.
    - **utils:** Helper functions used in this view.
    - **constants.ts:** Constants used in this view.
    - **types.ts:** Interfaces/Types used in this view.

- **app.tsx:** Webpack entry point for the react application, redux connector, and react-router configuration. Subdirectories in the views directory should match the router configuration in here. New routes should be configured here.
- **config.ts:** Configuration for the react application that is injected from the express server.
- **store.ts:** Redux store for the application.
- **tsconfig.json:** Typescript configuration for the react application.

.. _directory-structure-express:

Express
=======

::

    |── controllers/
    |   └── _tests_
    |── middlewares/
    |   └── _tests_/
    |── static/
    |── typings/
    |── utils/
    |   └── _tests_/
    |── views/
    |── constants.ts
    |── server.ts
    |── tsconfig.json
    └── types.js

- **_tests_:** See :ref:`directory-structure-tests`.
- **controllers:** Controllers that handle the different routes of the server. Files in this directory should follow he style referenced here: :ref:`code-style-express-router`.
- **middlewares:** Express middleware.
- **static:** Static assets that are served at the url ``/static/``.
- **typings:** Typescript definition files for 3rd party libraries that are not located in the DefinitelyTyped github repository.
- **utils:** Helper functions.
- **views:** Route templates.
- **constants.ts:** Constants used across the server.
- **server.ts:** Express server startup.
- **tsconfig.json:** Typescript configuration for the express server.
- **types.js** Type definitions for the server.

.. _directory-structure-tests:

Tests
=====

::

    └── (directory)/
        |── _tests_/
        |   |── file.spec.ts
        |   └── component.spec.tsx
        |── file.ts
        └── component.ts

You might notice a few directories in :ref:`directory-structure-react` and :ref:`directory-structure-express` with directories named ``_tests_``. These store tests for files in that directory. The test file name should be the same as the file it's testing, but it should be suffixed with ``.spec.ts`` or ``.spec.tsx``. The suffix depends on if the file contains any JSX in it. This structure keeps the directory from becoming polluted with spec files. See :ref:`tests` for more info.

.. _directory-structure-scss:

SCSS
====

::

    |── base/
    |   |── _bootstrap.scss
    |   |── _colors.scss
    |   |── _globals.scss
    |   └── _typography.scss
    |── components/
    |── pages/
    └── app.scss

- **base:** Global configuration of the stylesheet.

    - **_bootstrap.scss:** Imports, variables, and overrides for twitter bootstrap.
    - **_colors.scss:** Colors used throughout the stylesheet.
    - **_globals.scss:** Global css rules.
    - **_typography.scss:** Typeography for the stylesheet.

- **components:** Styling for components that are reused throughout the application.
- **pages:** Styling for specific pages.
- **app.scss:** File that glues all the scss partials together.

.. _directory-structure-build:

Build
=====

::

    |── express/
    |── static/
    |   └── css/
    |       └── main.css
    └── webpack/
        |── bundles/
        └── fonts/

- **express:** Compiled javascript from the express Typescript files in ``src/express``. The directory structure should be exactly the same, which is **SUPER IMPORTANT** because the compiled javascript references constants from the root ``constants.js`` and the webpack ``webpack/constants.js``. If you move ``src/express`` from where it currently is, it will break the server.
- **static:** Compiled static assets are placed here. Right now it only holds the compiled sass stylesheet.
- **webpack:** Compiled webpack bundles and assets are placed here.

.. _tests:

Testing
*******

::

    $ npm run test

This command runs all the testing commands for the application.

All tests use `Mocha <https://mochajs.org/>`_ as the testing framework, use `Chai <http://chaijs.com/>`_ as the assertion library, and uses `Sinon <http://sinonjs.org/>`_ for mocking.

See :ref:`directory-structure-tests` for information on where to place test files and how to name them.

.. _tests-react:

React
=====

::

    $ npm run test:react

This command looks for files in ``src/react`` that end with ``.spec.ts`` or ``.spec.tsx`` and runs them through `Karma <https://karma-runner.github.io/1.0/index.html>`_ using the config file ``karma.conf.js`` at the root of the project.

Any react component tests use `Enzyme <http://airbnb.io/enzyme/>`_ for shallow rendering.

.. _tests-express:

Express
=======

::

    $ npm run test:express

This command looks for files in ``src/express`` that end with ``.spec.ts`` and runs them through `Mocha <https://mochajs.org/>`_ using the config file ``mocha.opts`` at the root of the project.

.. _dev-task

Development Environment
***********************

::

    $ npm run dev

Running this command will start a couple of concurrent processes that make it easier to develop Cyclops. Whenever you make changes to the express source code, it restarts the server. Whenver you make changes to the react or scss source code, it sends a livreload request to the browser asking it to reload the webpage.

NPM Tasks
*********

- **build:css:** Compiles the scss files from ``src/scss/app.scss`` into ``build/static/css/main.css`` including the path ``node_modules/bootstrap-sass/assets/stylesheets`` for bootstrap imports.
- **build:express:** Compiles the Typescript files from ``src/express`` using ``src/express/tsconfig.json``.
- **watch:css:** Runs ``build:css``, then watches ``src/scss` for changes. When it detects a change, it runs ``build:css`` again.
- **watch:express:** Runs ``build:express`` in watch mode so it compiles on change.
- **server:dev:** Runs ``build/express/server.js`` with nodemon watching ``build/express`` for changes and with NODE_ENV set to DEV.
- **server:prod:** Runs ``build/express/server.js`` with NODE_ENV set to PROD.
- **webpack:prod:** Runs webpack using tools to minify the file output.
- **webpack:dev:** Runs webpack in watch mode.
- **test:react:** Runs Karma once using ``karma.conf.js``.
- **test:react-watch:** Runs Karma in watch mode.
- **test:express:** Runs mocha using ``mocha.opts``.
- **test:** Runs ``npm run test:express`` and ``npm run test:react``.
- **docs:** Builds API documentation using typedoc and ``typedoc.json`` as the tsconfig file.
- **livereload:** Starts a livereload server that sends a signal whenever there's a change in either ``build/static`` or ``build/webpack``.
- **clean:** Deletes the ``build`` directory.
- **build:** Cleans the ``build`` directory, then compiles the express, react, and scss files into the ``build`` directory.
- **dev:** Cleans the ``build`` directory, compiles the source code, watches for changes so it can recompile, and sends a livereload signal whenever it's finished compiling.
