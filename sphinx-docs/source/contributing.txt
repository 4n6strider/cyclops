.. _contributing:

############
Contributing
############


.. _api-docs:

API Documentation
*****************

Documentation for the Cyclops API is generated by following command::

    $ npm run docs

This will create HTML in a directory named `docs` that outlines all the individual components that make up the the express server and react application, and creates search functionality for all those components.

.. _code-style:

Code Style
**********

General
=======

The style uses `Typescript's coding guidelines <https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines>`_ and `TSLint rules <https://palantir.github.io/tslint/>`_ with a few exceptions. These exceptions are outlined in the ``tslint.json`` file at the root of the project directory.

Make sure to run TSLint before making a pull request.

.. _code-style-express-router:

Express Router
==============

::

    import { Router, RequestHandler } from 'express';

    export class NewRouter {
      /** Express router object. */
      public router: Router;

      constructor() {
        this.router = Router();
        this.middleware();
        this.routes();
      }

      /** Handles a routes request */
      public route: RequestHandler = (req, res) => {};

      /**
       * Configures middleware for this router.
       */
      private middleware(): void {
        this.router.use(URL, middleware);
      }

      /**
       * Configure routes for this router.
       */
      private routes(): void {
        this.router.get('*', this.route)
      }
    }

Whenever you need to use the router, just call ``new NewRouter().router``.

.. _code-style-typescript-redux:

Typescript Redux
================

There's a specific way to write redux actions and reducers that make it type safe. There are a few utilities and types to help with this process.

.. _code-style-typescript-redux-actions:

actions
-------

::
    
    // Helper function that creates a type safe action.
    import { createAction } from 'utils/createReduxAction';
    import {
      // Redux action type.
      ReduxAction,

      // Thunk action type that returns a promise.
      ThunkActionPromise,

      // Thunk action that doesn't return anything.
      ThunkActionVoid,
    } from 'types/redux';

    /**
     * Action type prefix to differentiate this set of actions from another
     * set of actions.
     * @type {string}
     */
    const ACTION_PREFIX = 'NAME';

    // --------------------------------------------------------------------------
    // CHANGE_NAME
    // --------------------------------------------------------------------------

    /**
     * Action Type: Action description goes here.
     * @type {string}
     */
    export const CHANGE_NAME = `${ACTION_PREFIX}/CHANGE_NAME`;

    /** CHANGE_NAME payload type. */
    export type ChangeNamePayload = string;

    /** CHANGE_NAME action type. */
    export type ChangeNameAction = ReduxAction<ChangeNamePayload>;

    /**
     * Creates a(n) CHANGE_NAME action.
     * @returns {ChangeNameAction}
     */
    export function changeName(payload: string): ChangeNameAction {
      return createAction(EXAMPLE, payload);
    }

    // --------------------------------------------------------------------------
    // Thunk Actions
    // --------------------------------------------------------------------------

    /**
     * Returns a redux thunk action that returns a promise.
     * @param arg Example argument
     * @returns {ThunkActionPromise}
     */
    export function thunkPromise(arg: string): ThunkActionPromise {
      return (dispatch, getState) => {
        return promise(arg).then((response) => {
          dispatch(changeName(response))
        });
      };
    }

    /**
     * Returns a redux thunk action that returns nothing.
     * @param arg Example argument
     * @returns {ThunkActionPromise}
     */
    export function thunkVoid(arg: string): ThunkActionVoid {
      return (dispatch, getState) => {
        dispatch(changeName(arg));
      };
    }

.. _code-style-typescript-redux-reducer:

reducer
-------

::
    
    // Third party library that helps create redux reducers and actions.
    import {
      // Creates the reducer for us from a reducer map.
      handleActions,
      // Object type that holds indexed reducer functions.
      ReducerMap,
    } from 'redux-actions';
    import * as _ from 'lodash';

    // Actions and actions types defined earlier.
    import * as actions from '../actions/actions';

    /** State shape of the reducer. */
    export interface State {
      name: string;
    }

    /**
     * Initial state of the reducer.
     * @type {State}
     */
    const INITIAL_STATE: State = {
      name: '',
    };

    /** Object that maps action types to their reducer functions. */
    const reducers: ReducerMap<State, any> = {};

    /**
     * Updates the reducer based on a(n) CHANGE_NAME action.
     * @param state Current reducer state.
     * @param action CHANGE_NAME action.
     * @returns {State} Updated reducer state.
     */
    reducers[actions.CHANGE_NAME] = (
      state: State,
      action: actions.ChangeNameAction,
    ): State => {
      // This checks if the update matches some of the state shape.
      const update: Partial<State> = {
        name: action.payload,
      };

      return _.assign({}, state, update);
    };

    /**
     * Combined reducer from reducer map.
     * @type {Reducer<State, any>}
     */
    export const reducer = handleActions<State, any>(reducers, INITIAL_STATE);

After creating a new reducer, link the State type to the main redux state shape in **store.ts** so that any references to the store state are type checked.

.. _directory-structure:

Directory Structure
*******************

When creating new files, ensure that they fit into the logic outlined by the current directory structure.

Root
====

::

    |── api-docs/
    |── dist/
    |── server/
    |── sphinx-docs/
    |── src/
    |── cyclops.config.ts
    |── cyclops.env
    |── cyclops.env.COPYME
    |── karma.conf.ts
    |── tsconfig.json
    |── tslint.json
    |── typedoc.json
    └── webpack.config.ts

- **dist:** Webpack output folder.
- **api-docs:** API documentation output folder.
- **server:** Express server source files. See :ref:`directory-structure-express`.
- **sphinx-docs:** Source files for creating this documentation.
- **src:** Source files for the react application. See :ref:`directory-structure-react` for more information.
- **cyclops.config.ts:** Environment variables and constants that are used by both the server and webpack.
- **constants.d.ts:** Typescript definition file for the constants so it can be used in any of the Typescript code bases.
- **cyclops.env:** Cyclops environment variables created whenever the express server is run. This is used for configuring the express server for runtime.
- **cyclops.env.COPYME:** Outline of the possible environment variables that can be created for cyclops.env.
- **typedoc.json:** Typescript configuration file used for creating the API documentation.

.. _directory-structure-react:

React
=====

::

    |── app/
    |   |── api/
    |   |   └── endpoint/
    |   |       |── api.ts
    |   |       |── constants.ts
    |   |       |── schema.ts
    |   |       |── types.ts
    |   |       └── utils.ts
    |   |── components/
    |   |── services/
    |   |   └── service/
    |   |       |── components/
    |   |       |── utils/
    |   |       |── types.ts
    |   |       └── constants.ts
    |   |── utils/
    |   |   └── utility.ts
    |   |── types/
    |   |   └── types.ts
    |   |── views/
    |   |   └── view/
    |   |       |── actions/
    |   |       |── components/
    |   |       |── containers/
    |   |       |── reducers/
    |   |       |── utils/
    |   |       |── constants.ts
    |   |       └── types.ts
    |   |── config.ts
    |   |── index.tsx
    |   └── store.ts
    |── styles/
    |── typings/
    |── app.tsx
    |── config.ts
    |── store.ts
    └── tsconfig.json

- **app:** Main application source files.

    - **api:** Contains files that connect to the Cyphon API. It's subdirectory's are correlated to the root of the Cyphon API to easily locate where endpoint types and functions live. Each subdirectory is named after the API url and can contains these files:

        - **api.ts:** Functions that gets or sends information to the API endpoint.
        - **constants.ts:** Constants for this endpoint.
        - **schemas.ts:** Normalizr schema's used to created normalized data from the objects returned from this endpoint.
        - **types.ts:** Object types returned from this endpoint.
        - **utils.ts:** Helper functions for objects returned from this endpoint.

    - **components:** Contains react components that are reused across the application.
    - **services:** Related react components and utilities that are reused across the application. Each subdirectory can contain these directories and file names:

        - **components:** React components for this service.
        - **utils:** Helper functions for this service.
        - **constants.ts:** Constants used for this service.
        - **types.ts:** Interfaces/Types used for this service.

    - **types:** Interfaces/Types used across the application.
    - **utils:** Helper functions used across the entire application.
    - **views:** Related react components and utilities that are specific to a particular route defined in react-router. Each subdirectory should be named for the route in the router definition and contain these directories and file names:

        - **actions:** Redux actions related to this view. Files in this directory should follow the style referenced here: :ref:`code-style-typescript-redux-actions`.
        - **components:** React components related to this view.
        - **containers:** Redux containers related to this view.
        - **reducers:** Redux reducers related to this view. Files in this directory should follow the style referenced here: :ref:`code-style-typescript-redux-reducer`.
        - **utils:** Helper functions used in this view.
        - **constants.ts:** Constants used in this view.
        - **types.ts:** Interfaces/Types used in this view.

    - **config.ts:** Configuration for the react application that is injected from the express server.
    - **index.tsx:** Root file of the application. Includes the redux connector and react-router configuration. Subdirectories in the views directory should match the router configuration in here. New routes should be configured here.
    - **store.ts:** Redux store for the application.

- **styles:** SCSS source files for the application stylesheets. See :ref:`directory-structure-scss` for more information.
- **typings:** Typescript definition files for 3rd party libraries that are not located in the DefinitelyTyped github repository.
- **main.ts:** Webpack entry point for the react application. Connects the react application to the root DOM element and includes any necessary CSS and JS to build the bundle.
- **pollyfill.ts:** ES6 pollyfills for things like Promises and Object functions.
- **test.ts:** Webpack entry point for test files.
- **tsconfig.json:** Typescript configuration for the react application.

.. _directory-structure-express:

Express
=======

::

    |── controllers/
    |── middlewares/
    |── static/
    |── typings/
    |── utils/
    |── views/
    |── constants.ts
    |── index.ts
    └── types.js

- **controllers:** Controllers that handle the different routes of the server. Files in this directory should follow he style referenced here: :ref:`code-style-express-router`.
- **middlewares:** Express middleware.
- **static:** Static assets that are served at the url ``/static/``.
- **typings:** Typescript definition files for 3rd party libraries that are not located in the DefinitelyTyped github repository.
- **utils:** Helper functions.
- **views:** Route templates.
- **constants.ts:** Constants used across the server.
- **index.ts:** Express server startup.
- **types.js** Type definitions for the server.

.. _directory-structure-scss:

SCSS
====

::

    |── base/
    |   |── _bootstrap.scss
    |   |── _colors.scss
    |   |── _globals.scss
    |   └── _typography.scss
    |── components/
    |── pages/
    └── app.scss

- **base:** Global configuration of the stylesheet.

    - **_bootstrap.scss:** Imports, variables, and overrides for twitter bootstrap.
    - **_colors.scss:** Colors used throughout the stylesheet.
    - **_globals.scss:** Global css rules.
    - **_typography.scss:** Typeography for the stylesheet.

- **components:** Styling for components that are reused throughout the application.
- **pages:** Styling for specific pages.
- **app.scss:** File that glues all the scss partials together.

.. _tests:

Testing
*******

Tests use `Mocha <https://mochajs.org/>`_ as the testing framework, `Chai <http://chaijs.com/>`_ as the assertion library, `Sinon <http://sinonjs.org/>`_ for mocking, `Enzyme <http://airbnb.io/enzyme/>`_ for react component rendering, and `Karma <https://karma-runner.github.io/1.0/index.html>`_. as the rest runner. Any test file created should have the suffix ``.spec.ts`` or ``.spec.tsx`` and placed next to the file it's testing.

::

    $ npm run test

This command looks for files in ``src`` that end with ``.spec.ts`` or ``.spec.tsx`` and runs them through `Karma <https://karma-runner.github.io/1.0/index.html>`_ once. Also creates a JSON coverage report in ``coverage`` that's used to create any HTML or lcov coverage reports.

::

    $ npm run test:watch

This command runs the test runner in watch mode so that any changes to the source files triggers the tests to run again.

::

    $ npm run travis

This command should only be run by `Travis CI <https://travis-ci.org/>`_ because it sends test coverage to coveralls, which fails in any other environment.

.. _tests-coverage:

Coverage
=====

::

    $ npm run coverage

Runs the test's once in order to create ``coverage/coverage.json``, then uses that file to create an HTML coverage report in ``coverage/html``.

::

    $ npm run coverage:html

Creates an HTML coverage report in ``coverage/html`` using ``coverage/coverage.json``. This will fail if the JSON file isn't created yet.

::

    $ npm run coverage:coveralls

Creates an lcov coverage report at ``coverage/lcov.info`` and sends it to coveralls using ``coverage/coverage.json``. This is only meant to by used by Travis CI and will fail in another other environment.

.. _dev-task

Development Environment
***********************

::

    $ npm run dev

Running this command will start a couple of concurrent processes that make it easier to develop Cyclops. Whenever you make changes to the express source code, it restarts the server. Whenver you make changes to the react or scss source code, it sends a livreload request to the browser asking it to reload the webpage.

NPM Tasks
*********
- **server:dev:** Runs the server in watch mode and restarts whenever changes are made to the server source code.
- **server:prod:** Runs the server in production mode.
- **client:dev:** Runs webpack in watch mode.
- **client:prod:** Runs webpack in production mode, which results in a minified webpack output.
- **test:watch:** Runs tests in watch mode.
- **test:** Runs tests once and creates a JSON coverage report.
- **travis:** Runs tests once and sends the coverage report to coveralls.
- **docs:api:** Builds API documentation into ``api-docs``.
- **docs:sphinx:** Builds this documentation.
- **livereload:** Starts a livereload server that sends a signal whenever there's a change in ``dist``.
- **coverage:** Runs tests once and creates an HTML coverage report in ``coverage``.
- **coverage:html:** Creates an HTML coverage report in ``coverage`` from ``coverage/coverage.json``.
- **coverage:coveralls:** Creates an lcov coverage report in ``coverage`` and sends it to coveralls.
- **clean:** Deletes the ``dist`` directory.
- **start:** Starts the server in production mode.
- **build:** Compiles a minified version of the webpack bundle into ``dist``.
- **dev:** Starts the server in development mode, starts webpack in watch mode, and starts a livereload server in parallel.
